#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GuruTest
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="TestGuruDB")]
	public partial class TestGuruDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertArticle(Article instance);
    partial void UpdateArticle(Article instance);
    partial void DeleteArticle(Article instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertAttachment(Attachment instance);
    partial void UpdateAttachment(Attachment instance);
    partial void DeleteAttachment(Attachment instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertUserFile(UserFile instance);
    partial void UpdateUserFile(UserFile instance);
    partial void DeleteUserFile(UserFile instance);
    partial void InsertAccountRole(AccountRole instance);
    partial void UpdateAccountRole(AccountRole instance);
    partial void DeleteAccountRole(AccountRole instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertPermissionRole(PermissionRole instance);
    partial void UpdatePermissionRole(PermissionRole instance);
    partial void DeletePermissionRole(PermissionRole instance);
    partial void InsertRestrictedEmail(RestrictedEmail instance);
    partial void UpdateRestrictedEmail(RestrictedEmail instance);
    partial void DeleteRestrictedEmail(RestrictedEmail instance);
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    #endregion
		
		public TestGuruDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TestGuruDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TestGuruDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TestGuruDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TestGuruDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TestGuruDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Article> Articles
		{
			get
			{
				return this.GetTable<Article>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Attachment> Attachments
		{
			get
			{
				return this.GetTable<Attachment>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<UserFile> UserFiles
		{
			get
			{
				return this.GetTable<UserFile>();
			}
		}
		
		public System.Data.Linq.Table<AccountRole> AccountRoles
		{
			get
			{
				return this.GetTable<AccountRole>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permissions
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<PermissionRole> PermissionRoles
		{
			get
			{
				return this.GetTable<PermissionRole>();
			}
		}
		
		public System.Data.Linq.Table<RestrictedEmail> RestrictedEmails
		{
			get
			{
				return this.GetTable<RestrictedEmail>();
			}
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
	}
	
	[Table(Name="Articles.Articles")]
	public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ArticleID;
		
		private int _AuthorID;
		
		private string _Title;
		
		private string _Tags;
		
		private string _Category;
		
		private System.DateTime _CreationDate;
		
		private int _Status;
		
		private int _ShowCount;
		
		private double _AverageGrade;
		
		private int _GradesCount;
		
		private string _Content;
		
		private EntitySet<Attachment> _Attachments;
		
		private EntitySet<Comment> _Comments;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArticleIDChanging(int value);
    partial void OnArticleIDChanged();
    partial void OnAuthorIDChanging(int value);
    partial void OnAuthorIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnShowCountChanging(int value);
    partial void OnShowCountChanged();
    partial void OnAverageGradeChanging(double value);
    partial void OnAverageGradeChanged();
    partial void OnGradesCountChanging(int value);
    partial void OnGradesCountChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    #endregion
		
		public Article()
		{
			this._Attachments = new EntitySet<Attachment>(new Action<Attachment>(this.attach_Attachments), new Action<Attachment>(this.detach_Attachments));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[Column(Storage="_ArticleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ArticleID
		{
			get
			{
				return this._ArticleID;
			}
			set
			{
				if ((this._ArticleID != value))
				{
					this.OnArticleIDChanging(value);
					this.SendPropertyChanging();
					this._ArticleID = value;
					this.SendPropertyChanged("ArticleID");
					this.OnArticleIDChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorID", DbType="Int NOT NULL")]
		public int AuthorID
		{
			get
			{
				return this._AuthorID;
			}
			set
			{
				if ((this._AuthorID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorID = value;
					this.SendPropertyChanged("AuthorID");
					this.OnAuthorIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Tags", DbType="VarChar(600)")]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this.OnTagsChanging(value);
					this.SendPropertyChanging();
					this._Tags = value;
					this.SendPropertyChanged("Tags");
					this.OnTagsChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_ShowCount", DbType="Int NOT NULL")]
		public int ShowCount
		{
			get
			{
				return this._ShowCount;
			}
			set
			{
				if ((this._ShowCount != value))
				{
					this.OnShowCountChanging(value);
					this.SendPropertyChanging();
					this._ShowCount = value;
					this.SendPropertyChanged("ShowCount");
					this.OnShowCountChanged();
				}
			}
		}
		
		[Column(Storage="_AverageGrade", DbType="Float NOT NULL")]
		public double AverageGrade
		{
			get
			{
				return this._AverageGrade;
			}
			set
			{
				if ((this._AverageGrade != value))
				{
					this.OnAverageGradeChanging(value);
					this.SendPropertyChanging();
					this._AverageGrade = value;
					this.SendPropertyChanged("AverageGrade");
					this.OnAverageGradeChanged();
				}
			}
		}
		
		[Column(Storage="_GradesCount", DbType="Int NOT NULL")]
		public int GradesCount
		{
			get
			{
				return this._GradesCount;
			}
			set
			{
				if ((this._GradesCount != value))
				{
					this.OnGradesCountChanging(value);
					this.SendPropertyChanging();
					this._GradesCount = value;
					this.SendPropertyChanged("GradesCount");
					this.OnGradesCountChanged();
				}
			}
		}
		
		[Column(Storage="_Content", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[Association(Name="Article_Attachment", Storage="_Attachments", ThisKey="ArticleID", OtherKey="ArticleID")]
		public EntitySet<Attachment> Attachments
		{
			get
			{
				return this._Attachments;
			}
			set
			{
				this._Attachments.Assign(value);
			}
		}
		
		[Association(Name="Article_Comment", Storage="_Comments", ThisKey="ArticleID", OtherKey="ArticleID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[Association(Name="Account_Article", Storage="_Account", ThisKey="AuthorID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Articles.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Articles.Add(this);
						this._AuthorID = value.ID;
					}
					else
					{
						this._AuthorID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attachments(Attachment entity)
		{
			this.SendPropertyChanging();
			entity.Article = this;
		}
		
		private void detach_Attachments(Attachment entity)
		{
			this.SendPropertyChanging();
			entity.Article = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Article = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Article = null;
		}
	}
	
	[Table(Name="Auth.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private bool _Administrator;
		
		private EntitySet<AccountRole> _AccountRoles;
		
		private EntitySet<PermissionRole> _PermissionRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAdministratorChanging(bool value);
    partial void OnAdministratorChanged();
    #endregion
		
		public Role()
		{
			this._AccountRoles = new EntitySet<AccountRole>(new Action<AccountRole>(this.attach_AccountRoles), new Action<AccountRole>(this.detach_AccountRoles));
			this._PermissionRoles = new EntitySet<PermissionRole>(new Action<PermissionRole>(this.attach_PermissionRoles), new Action<PermissionRole>(this.detach_PermissionRoles));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Administrator", DbType="Bit NOT NULL")]
		public bool Administrator
		{
			get
			{
				return this._Administrator;
			}
			set
			{
				if ((this._Administrator != value))
				{
					this.OnAdministratorChanging(value);
					this.SendPropertyChanging();
					this._Administrator = value;
					this.SendPropertyChanged("Administrator");
					this.OnAdministratorChanged();
				}
			}
		}
		
		[Association(Name="Role_AccountRole", Storage="_AccountRoles", ThisKey="ID", OtherKey="Role")]
		public EntitySet<AccountRole> AccountRoles
		{
			get
			{
				return this._AccountRoles;
			}
			set
			{
				this._AccountRoles.Assign(value);
			}
		}
		
		[Association(Name="Role_PermissionRole", Storage="_PermissionRoles", ThisKey="ID", OtherKey="Role")]
		public EntitySet<PermissionRole> PermissionRoles
		{
			get
			{
				return this._PermissionRoles;
			}
			set
			{
				this._PermissionRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountRoles(AccountRole entity)
		{
			this.SendPropertyChanging();
			entity.Role1 = this;
		}
		
		private void detach_AccountRoles(AccountRole entity)
		{
			this.SendPropertyChanging();
			entity.Role1 = null;
		}
		
		private void attach_PermissionRoles(PermissionRole entity)
		{
			this.SendPropertyChanging();
			entity.Role1 = this;
		}
		
		private void detach_PermissionRoles(PermissionRole entity)
		{
			this.SendPropertyChanging();
			entity.Role1 = null;
		}
	}
	
	[Table(Name="Articles.Attachments")]
	public partial class Attachment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ArticleID;
		
		private int _FileID;
		
		private EntityRef<Article> _Article;
		
		private EntityRef<UserFile> _UserFile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArticleIDChanging(int value);
    partial void OnArticleIDChanged();
    partial void OnFileIDChanging(int value);
    partial void OnFileIDChanged();
    #endregion
		
		public Attachment()
		{
			this._Article = default(EntityRef<Article>);
			this._UserFile = default(EntityRef<UserFile>);
			OnCreated();
		}
		
		[Column(Storage="_ArticleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ArticleID
		{
			get
			{
				return this._ArticleID;
			}
			set
			{
				if ((this._ArticleID != value))
				{
					if (this._Article.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArticleIDChanging(value);
					this.SendPropertyChanging();
					this._ArticleID = value;
					this.SendPropertyChanged("ArticleID");
					this.OnArticleIDChanged();
				}
			}
		}
		
		[Column(Storage="_FileID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FileID
		{
			get
			{
				return this._FileID;
			}
			set
			{
				if ((this._FileID != value))
				{
					if (this._UserFile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileIDChanging(value);
					this.SendPropertyChanging();
					this._FileID = value;
					this.SendPropertyChanged("FileID");
					this.OnFileIDChanged();
				}
			}
		}
		
		[Association(Name="Article_Attachment", Storage="_Article", ThisKey="ArticleID", OtherKey="ArticleID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Article Article
		{
			get
			{
				return this._Article.Entity;
			}
			set
			{
				Article previousValue = this._Article.Entity;
				if (((previousValue != value) 
							|| (this._Article.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Article.Entity = null;
						previousValue.Attachments.Remove(this);
					}
					this._Article.Entity = value;
					if ((value != null))
					{
						value.Attachments.Add(this);
						this._ArticleID = value.ArticleID;
					}
					else
					{
						this._ArticleID = default(int);
					}
					this.SendPropertyChanged("Article");
				}
			}
		}
		
		[Association(Name="UserFile_Attachment", Storage="_UserFile", ThisKey="FileID", OtherKey="FileID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UserFile UserFile
		{
			get
			{
				return this._UserFile.Entity;
			}
			set
			{
				UserFile previousValue = this._UserFile.Entity;
				if (((previousValue != value) 
							|| (this._UserFile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserFile.Entity = null;
						previousValue.Attachments.Remove(this);
					}
					this._UserFile.Entity = value;
					if ((value != null))
					{
						value.Attachments.Add(this);
						this._FileID = value.FileID;
					}
					else
					{
						this._FileID = default(int);
					}
					this.SendPropertyChanged("UserFile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Articles.Comments")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommentID;
		
		private int _ArticleID;
		
		private int _AuthorID;
		
		private System.DateTime _PostDate;
		
		private string _Content;
		
		private EntityRef<Article> _Article;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    partial void OnArticleIDChanging(int value);
    partial void OnArticleIDChanged();
    partial void OnAuthorIDChanging(int value);
    partial void OnAuthorIDChanged();
    partial void OnPostDateChanging(System.DateTime value);
    partial void OnPostDateChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    #endregion
		
		public Comment()
		{
			this._Article = default(EntityRef<Article>);
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[Column(Storage="_CommentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[Column(Storage="_ArticleID", DbType="Int NOT NULL")]
		public int ArticleID
		{
			get
			{
				return this._ArticleID;
			}
			set
			{
				if ((this._ArticleID != value))
				{
					if (this._Article.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArticleIDChanging(value);
					this.SendPropertyChanging();
					this._ArticleID = value;
					this.SendPropertyChanged("ArticleID");
					this.OnArticleIDChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorID", DbType="Int NOT NULL")]
		public int AuthorID
		{
			get
			{
				return this._AuthorID;
			}
			set
			{
				if ((this._AuthorID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorID = value;
					this.SendPropertyChanged("AuthorID");
					this.OnAuthorIDChanged();
				}
			}
		}
		
		[Column(Storage="_PostDate", DbType="DateTime NOT NULL")]
		public System.DateTime PostDate
		{
			get
			{
				return this._PostDate;
			}
			set
			{
				if ((this._PostDate != value))
				{
					this.OnPostDateChanging(value);
					this.SendPropertyChanging();
					this._PostDate = value;
					this.SendPropertyChanged("PostDate");
					this.OnPostDateChanged();
				}
			}
		}
		
		[Column(Storage="_Content", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[Association(Name="Article_Comment", Storage="_Article", ThisKey="ArticleID", OtherKey="ArticleID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Article Article
		{
			get
			{
				return this._Article.Entity;
			}
			set
			{
				Article previousValue = this._Article.Entity;
				if (((previousValue != value) 
							|| (this._Article.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Article.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Article.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._ArticleID = value.ArticleID;
					}
					else
					{
						this._ArticleID = default(int);
					}
					this.SendPropertyChanged("Article");
				}
			}
		}
		
		[Association(Name="Account_Comment", Storage="_Account", ThisKey="AuthorID", OtherKey="ID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._AuthorID = value.ID;
					}
					else
					{
						this._AuthorID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Articles.UserFiles")]
	public partial class UserFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FileID;
		
		private System.Nullable<int> _OwnerID;
		
		private int _Size;
		
		private string _FilePath;
		
		private string _DisplayedName;
		
		private EntitySet<Attachment> _Attachments;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileIDChanging(int value);
    partial void OnFileIDChanged();
    partial void OnOwnerIDChanging(System.Nullable<int> value);
    partial void OnOwnerIDChanged();
    partial void OnSizeChanging(int value);
    partial void OnSizeChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnDisplayedNameChanging(string value);
    partial void OnDisplayedNameChanged();
    #endregion
		
		public UserFile()
		{
			this._Attachments = new EntitySet<Attachment>(new Action<Attachment>(this.attach_Attachments), new Action<Attachment>(this.detach_Attachments));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[Column(Storage="_FileID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FileID
		{
			get
			{
				return this._FileID;
			}
			set
			{
				if ((this._FileID != value))
				{
					this.OnFileIDChanging(value);
					this.SendPropertyChanging();
					this._FileID = value;
					this.SendPropertyChanged("FileID");
					this.OnFileIDChanged();
				}
			}
		}
		
		[Column(Storage="_OwnerID", DbType="Int")]
		public System.Nullable<int> OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[Column(Storage="_Size", DbType="Int NOT NULL")]
		public int Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[Column(Storage="_FilePath", DbType="VarChar(280) NOT NULL", CanBeNull=false)]
		public string FilePath
		{
			get
			{
				return this._FilePath;
			}
			set
			{
				if ((this._FilePath != value))
				{
					this.OnFilePathChanging(value);
					this.SendPropertyChanging();
					this._FilePath = value;
					this.SendPropertyChanged("FilePath");
					this.OnFilePathChanged();
				}
			}
		}
		
		[Column(Storage="_DisplayedName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string DisplayedName
		{
			get
			{
				return this._DisplayedName;
			}
			set
			{
				if ((this._DisplayedName != value))
				{
					this.OnDisplayedNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayedName = value;
					this.SendPropertyChanged("DisplayedName");
					this.OnDisplayedNameChanged();
				}
			}
		}
		
		[Association(Name="UserFile_Attachment", Storage="_Attachments", ThisKey="FileID", OtherKey="FileID")]
		public EntitySet<Attachment> Attachments
		{
			get
			{
				return this._Attachments;
			}
			set
			{
				this._Attachments.Assign(value);
			}
		}
		
		[Association(Name="Account_UserFile", Storage="_Account", ThisKey="OwnerID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.UserFiles.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.UserFiles.Add(this);
						this._OwnerID = value.ID;
					}
					else
					{
						this._OwnerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attachments(Attachment entity)
		{
			this.SendPropertyChanging();
			entity.UserFile = this;
		}
		
		private void detach_Attachments(Attachment entity)
		{
			this.SendPropertyChanging();
			entity.UserFile = null;
		}
	}
	
	[Table(Name="Auth.AccountRole")]
	public partial class AccountRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Account;
		
		private int _Role;
		
		private EntityRef<Role> _Role1;
		
		private EntityRef<Account> _Account1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountChanging(int value);
    partial void OnAccountChanged();
    partial void OnRoleChanging(int value);
    partial void OnRoleChanged();
    #endregion
		
		public AccountRole()
		{
			this._Role1 = default(EntityRef<Role>);
			this._Account1 = default(EntityRef<Account>);
			OnCreated();
		}
		
		[Column(Storage="_Account", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Account
		{
			get
			{
				return this._Account;
			}
			set
			{
				if ((this._Account != value))
				{
					if (this._Account1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountChanging(value);
					this.SendPropertyChanging();
					this._Account = value;
					this.SendPropertyChanged("Account");
					this.OnAccountChanged();
				}
			}
		}
		
		[Column(Storage="_Role", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					if (this._Role1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[Association(Name="Role_AccountRole", Storage="_Role1", ThisKey="Role", OtherKey="ID", IsForeignKey=true)]
		public Role Role1
		{
			get
			{
				return this._Role1.Entity;
			}
			set
			{
				Role previousValue = this._Role1.Entity;
				if (((previousValue != value) 
							|| (this._Role1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role1.Entity = null;
						previousValue.AccountRoles.Remove(this);
					}
					this._Role1.Entity = value;
					if ((value != null))
					{
						value.AccountRoles.Add(this);
						this._Role = value.ID;
					}
					else
					{
						this._Role = default(int);
					}
					this.SendPropertyChanged("Role1");
				}
			}
		}
		
		[Association(Name="Account_AccountRole", Storage="_Account1", ThisKey="Account", OtherKey="ID", IsForeignKey=true)]
		public Account Account1
		{
			get
			{
				return this._Account1.Entity;
			}
			set
			{
				Account previousValue = this._Account1.Entity;
				if (((previousValue != value) 
							|| (this._Account1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account1.Entity = null;
						previousValue.AccountRoles.Remove(this);
					}
					this._Account1.Entity = value;
					if ((value != null))
					{
						value.AccountRoles.Add(this);
						this._Account = value.ID;
					}
					else
					{
						this._Account = default(int);
					}
					this.SendPropertyChanged("Account1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Auth.Permission")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private EntitySet<PermissionRole> _PermissionRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Permission()
		{
			this._PermissionRoles = new EntitySet<PermissionRole>(new Action<PermissionRole>(this.attach_PermissionRoles), new Action<PermissionRole>(this.detach_PermissionRoles));
			OnCreated();
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Permission_PermissionRole", Storage="_PermissionRoles", ThisKey="Name", OtherKey="Permission")]
		public EntitySet<PermissionRole> PermissionRoles
		{
			get
			{
				return this._PermissionRoles;
			}
			set
			{
				this._PermissionRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PermissionRoles(PermissionRole entity)
		{
			this.SendPropertyChanging();
			entity.Permission1 = this;
		}
		
		private void detach_PermissionRoles(PermissionRole entity)
		{
			this.SendPropertyChanging();
			entity.Permission1 = null;
		}
	}
	
	[Table(Name="Auth.PermissionRole")]
	public partial class PermissionRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Permission;
		
		private int _Role;
		
		private EntityRef<Permission> _Permission1;
		
		private EntityRef<Role> _Role1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermissionChanging(string value);
    partial void OnPermissionChanged();
    partial void OnRoleChanging(int value);
    partial void OnRoleChanged();
    #endregion
		
		public PermissionRole()
		{
			this._Permission1 = default(EntityRef<Permission>);
			this._Role1 = default(EntityRef<Role>);
			OnCreated();
		}
		
		[Column(Storage="_Permission", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Permission
		{
			get
			{
				return this._Permission;
			}
			set
			{
				if ((this._Permission != value))
				{
					if (this._Permission1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionChanging(value);
					this.SendPropertyChanging();
					this._Permission = value;
					this.SendPropertyChanged("Permission");
					this.OnPermissionChanged();
				}
			}
		}
		
		[Column(Storage="_Role", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					if (this._Role1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[Association(Name="Permission_PermissionRole", Storage="_Permission1", ThisKey="Permission", OtherKey="Name", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Permission Permission1
		{
			get
			{
				return this._Permission1.Entity;
			}
			set
			{
				Permission previousValue = this._Permission1.Entity;
				if (((previousValue != value) 
							|| (this._Permission1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission1.Entity = null;
						previousValue.PermissionRoles.Remove(this);
					}
					this._Permission1.Entity = value;
					if ((value != null))
					{
						value.PermissionRoles.Add(this);
						this._Permission = value.Name;
					}
					else
					{
						this._Permission = default(string);
					}
					this.SendPropertyChanged("Permission1");
				}
			}
		}
		
		[Association(Name="Role_PermissionRole", Storage="_Role1", ThisKey="Role", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Role Role1
		{
			get
			{
				return this._Role1.Entity;
			}
			set
			{
				Role previousValue = this._Role1.Entity;
				if (((previousValue != value) 
							|| (this._Role1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role1.Entity = null;
						previousValue.PermissionRoles.Remove(this);
					}
					this._Role1.Entity = value;
					if ((value != null))
					{
						value.PermissionRoles.Add(this);
						this._Role = value.ID;
					}
					else
					{
						this._Role = default(int);
					}
					this.SendPropertyChanged("Role1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Auth.RestrictedEmail")]
	public partial class RestrictedEmail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Email;
		
		private System.DateTime _Blocked;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnBlockedChanging(System.DateTime value);
    partial void OnBlockedChanged();
    #endregion
		
		public RestrictedEmail()
		{
			OnCreated();
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Blocked", DbType="DateTime NOT NULL")]
		public System.DateTime Blocked
		{
			get
			{
				return this._Blocked;
			}
			set
			{
				if ((this._Blocked != value))
				{
					this.OnBlockedChanging(value);
					this.SendPropertyChanging();
					this._Blocked = value;
					this.SendPropertyChanged("Blocked");
					this.OnBlockedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Auth.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Login;
		
		private System.Data.Linq.Binary _Password;
		
		private string _PasswordQuestion;
		
		private string _PasswordAnswer;
		
		private bool _Active;
		
		private bool _Deleted;
		
		private System.Guid _ActivationGUID;
		
		private System.Guid _TerminationGUID;
		
		private string _Email;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _City;
		
		private System.DateTime _Created;
		
		private System.DateTime _LastActivityDate;
		
		private EntitySet<Article> _Articles;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<UserFile> _UserFiles;
		
		private EntitySet<AccountRole> _AccountRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(System.Data.Linq.Binary value);
    partial void OnPasswordChanged();
    partial void OnPasswordQuestionChanging(string value);
    partial void OnPasswordQuestionChanged();
    partial void OnPasswordAnswerChanging(string value);
    partial void OnPasswordAnswerChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnActivationGUIDChanging(System.Guid value);
    partial void OnActivationGUIDChanged();
    partial void OnTerminationGUIDChanging(System.Guid value);
    partial void OnTerminationGUIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public Account()
		{
			this._Articles = new EntitySet<Article>(new Action<Article>(this.attach_Articles), new Action<Article>(this.detach_Articles));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._UserFiles = new EntitySet<UserFile>(new Action<UserFile>(this.attach_UserFiles), new Action<UserFile>(this.detach_UserFiles));
			this._AccountRoles = new EntitySet<AccountRole>(new Action<AccountRole>(this.attach_AccountRoles), new Action<AccountRole>(this.detach_AccountRoles));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Login", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="Binary(16) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordQuestion", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string PasswordQuestion
		{
			get
			{
				return this._PasswordQuestion;
			}
			set
			{
				if ((this._PasswordQuestion != value))
				{
					this.OnPasswordQuestionChanging(value);
					this.SendPropertyChanging();
					this._PasswordQuestion = value;
					this.SendPropertyChanged("PasswordQuestion");
					this.OnPasswordQuestionChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordAnswer", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string PasswordAnswer
		{
			get
			{
				return this._PasswordAnswer;
			}
			set
			{
				if ((this._PasswordAnswer != value))
				{
					this.OnPasswordAnswerChanging(value);
					this.SendPropertyChanging();
					this._PasswordAnswer = value;
					this.SendPropertyChanged("PasswordAnswer");
					this.OnPasswordAnswerChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_ActivationGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ActivationGUID
		{
			get
			{
				return this._ActivationGUID;
			}
			set
			{
				if ((this._ActivationGUID != value))
				{
					this.OnActivationGUIDChanging(value);
					this.SendPropertyChanging();
					this._ActivationGUID = value;
					this.SendPropertyChanged("ActivationGUID");
					this.OnActivationGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_TerminationGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TerminationGUID
		{
			get
			{
				return this._TerminationGUID;
			}
			set
			{
				if ((this._TerminationGUID != value))
				{
					this.OnTerminationGUIDChanging(value);
					this.SendPropertyChanging();
					this._TerminationGUID = value;
					this.SendPropertyChanged("TerminationGUID");
					this.OnTerminationGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[Association(Name="Account_Article", Storage="_Articles", ThisKey="ID", OtherKey="AuthorID")]
		public EntitySet<Article> Articles
		{
			get
			{
				return this._Articles;
			}
			set
			{
				this._Articles.Assign(value);
			}
		}
		
		[Association(Name="Account_Comment", Storage="_Comments", ThisKey="ID", OtherKey="AuthorID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[Association(Name="Account_UserFile", Storage="_UserFiles", ThisKey="ID", OtherKey="OwnerID")]
		public EntitySet<UserFile> UserFiles
		{
			get
			{
				return this._UserFiles;
			}
			set
			{
				this._UserFiles.Assign(value);
			}
		}
		
		[Association(Name="Account_AccountRole", Storage="_AccountRoles", ThisKey="ID", OtherKey="Account")]
		public EntitySet<AccountRole> AccountRoles
		{
			get
			{
				return this._AccountRoles;
			}
			set
			{
				this._AccountRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Articles(Article entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Articles(Article entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_UserFiles(UserFile entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_UserFiles(UserFile entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_AccountRoles(AccountRole entity)
		{
			this.SendPropertyChanging();
			entity.Account1 = this;
		}
		
		private void detach_AccountRoles(AccountRole entity)
		{
			this.SendPropertyChanging();
			entity.Account1 = null;
		}
	}
}
#pragma warning restore 1591
